package net.ideahut.springboot.runtime.hints;

import org.springframework.aot.hint.MemberCategory;
import org.springframework.aot.hint.RuntimeHints;
import org.springframework.aot.hint.RuntimeHintsRegistrar;
import org.springframework.aot.hint.TypeReference;


public class IdeahutRuntimeHints implements RuntimeHintsRegistrar {

	@Override
	public void registerHints(RuntimeHints hints, ClassLoader loader) {
		hints.reflection().registerType(TypeReference.of("[Lnet.ideahut.springboot.crud.Condition"));
		hints.reflection().registerType(TypeReference.of("[Lnet.ideahut.springboot.crud.CrudAction"));
		hints.reflection().registerType(TypeReference.of("[Lnet.ideahut.springboot.crud.Logical"));
		hints.reflection().registerType(TypeReference.of("[Lnet.ideahut.springboot.crud.Match"));
		hints.reflection().registerType(TypeReference.of("[Lnet.ideahut.springboot.entity.EntityIdType"));
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.admin.AdminController"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.admin.AdminController$CacheRequest"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.admin.AdminHandler"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.admin.AdminHandlerImpl"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.admin.AdminInfo"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.admin.AdminInfo$Application"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.admin.AdminInfo$Bean"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.admin.AdminInfo$Version"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.admin.AdminMenu"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.admin.AdminProperties"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.admin.AdminProperties$Api"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.admin.AdminProperties$Crud"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.admin.AdminProperties$Grid"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.admin.AdminProperties$Module"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.admin.AdminProperties$Modules"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.admin.AdminProperties$Resource"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.admin.AdminSecurity"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.admin.AdminTrxManagerInfo"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.admin.AdminTrxManagerInfo$Entity"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.admin.AdminTrxManagerInfo$Field"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.admin.AdminTrxManagerInfo$Id"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.annotation.Audit"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.annotation.IdPrefix"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.annotation.Public"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.audit.AuditAccessible$AuditField"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.audit.AuditAccessible$AuditMember"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.audit.AuditHandler"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.audit.AuditHelper$Sql"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.audit.AuditHelper$Where"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.audit.AuditObject"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.audit.AuditRequest"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.audit.DatabaseAuditProperties"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.audit.DatabaseAuditProperties$Enable"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.audit.DatabaseAuditProperties$Generate"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.audit.DatabaseAuditProperties$Table"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.audit.DatabaseMultiAuditHandler"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.bean.BeanConfigure"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.bean.BeanReload"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.cache.CacheGroupHandler"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.cache.CacheGroupProperties"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.cache.CacheHandler"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.cache.CacheInfo"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.cache.RedisCacheGroupHandler"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.cache.RedisCacheHandler"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.config.BasicWebMvcConfig"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.crud.Condition"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.crud.Condition$QueryParameters"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.crud.CrudAction"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.crud.CrudAction$6"));
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.crud.CrudController"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.crud.CrudControllerBase"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.crud.CrudHandler"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.crud.CrudHandlerImpl"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.crud.CrudHelper0$Key"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.crud.CrudHelper0$Split"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.crud.CrudHelper0$TypeRef"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.crud.CrudPermission"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.crud.CrudProps"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.crud.CrudRequest"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.crud.CrudRequest$MapConfig"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.crud.CrudResource"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.crud.CrudRest"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.crud.CrudResult"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.crud.CrudSelect0$Ql"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.crud.CrudSelect0$SelectJoin"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.crud.CrudSelect0$StartLimit"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.crud.CrudUpdateEntity"));
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.crud.Filter"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.crud.Join"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.crud.Logical"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.crud.Match"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.crud.Relation"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.crud.Stack"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.entity.EntityAudit"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.entity.EntityAuditSoftDelete"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.entity.EntityAuditSoftDelete_"));
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.entity.EntityAudit_"));
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.entity.EntityBase"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.entity.EntityBase_"));
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.entity.EntityHelper"));
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.entity.EntityIdType"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.entity.EntityIntegrator"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.entity.EntityNative$Parameter"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.entity.EntityPostListener"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.entity.EntityPreListener"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.entity.EntityReplica$Creation"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.entity.EntitySoftDelete"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.entity.EntityTrxManager"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.entity.EntityTrxManagerImpl"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.entity.TrxManagerInfo"));
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.filter.DefaultRequestFilter"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.filter.SecurityAuthorizationFilter"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.generator.OdtIdGenerator"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.grid.GridHandler"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.grid.GridHandlerImpl"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.grid.GridSource"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.init.InitEnum"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.init.InitHandler"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.init.InitHandlerImpl"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.init.InitMapper"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.init.InitRequest"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.job.JobBase"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.job.JobBaseBeanInfo"));
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.job.JobBaseCustomizer"));
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.job.JobGroupDto"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.job.JobService"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.job.JobTriggerDto"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.job.JobTriggerDto$Status"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.job.JobTypeDto"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.job.SchedulerHandler"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.job.SchedulerHandlerImpl"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.mail.MailHandler"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.mail.MailHandlerImpl"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.mail.MailProperties"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.mapper.DataMapper"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.mapper.DataMapperImpl"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.message.MessageHandler"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.object.MapStringObject"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.object.Message"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.object.Option"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.object.Page"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.object.Result"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.redis.RedisInfo"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.redis.RedisProperties"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.redis.RedisProperties$Standalone"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.security.RedisMemoryCredential"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.security.SecurityAuthorization"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.security.SecurityCredential"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.security.SecurityUser"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.sysparam.SysParamDto"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.sysparam.SysParamHandler"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.sysparam.SysParamHandlerImpl"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.sysparam.SysParamReloader"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.sysparam.SysParamRemover"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.task.TaskHandler"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.task.TaskHandlerImpl"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.task.TaskProperties"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("net.ideahut.springboot.util.FrameworkUtil"));
	}
}
