package net.ideahut.springboot.runtime.hints;

import org.springframework.aot.hint.MemberCategory;
import org.springframework.aot.hint.RuntimeHints;
import org.springframework.aot.hint.RuntimeHintsRegistrar;
import org.springframework.aot.hint.TypeReference;


public class HibernateRuntimeHints implements RuntimeHintsRegistrar {

	@Override
	public void registerHints(RuntimeHints hints, ClassLoader loader) {
		hints.resources().registerPattern("\\QMETA-INF/services/org.hibernate.boot.model.FunctionContributor\\E");
		hints.resources().registerPattern("\\QMETA-INF/services/org.hibernate.boot.model.TypeContributor\\E");
		hints.resources().registerPattern("\\QMETA-INF/services/org.hibernate.boot.registry.selector.StrategyRegistrationProvider\\E");
		hints.resources().registerPattern("\\QMETA-INF/services/org.hibernate.boot.registry.selector.spi.DialectSelector\\E");
		hints.resources().registerPattern("\\QMETA-INF/services/org.hibernate.boot.spi.AdditionalJaxbMappingProducer\\E");
		hints.resources().registerPattern("\\QMETA-INF/services/org.hibernate.boot.spi.AdditionalMappingContributor\\E");
		hints.resources().registerPattern("\\QMETA-INF/services/org.hibernate.boot.spi.MetadataBuilderContributor\\E");
		hints.resources().registerPattern("\\QMETA-INF/services/org.hibernate.boot.spi.MetadataBuilderFactory\\E");
		hints.resources().registerPattern("\\QMETA-INF/services/org.hibernate.boot.spi.MetadataBuilderInitializer\\E");
		hints.resources().registerPattern("\\QMETA-INF/services/org.hibernate.boot.spi.MetadataContributor\\E");
		hints.resources().registerPattern("\\QMETA-INF/services/org.hibernate.boot.spi.MetadataSourcesContributor\\E");
		hints.resources().registerPattern("\\QMETA-INF/services/org.hibernate.boot.spi.SessionFactoryBuilderFactory\\E");
		hints.resources().registerPattern("\\QMETA-INF/services/org.hibernate.engine.jdbc.dialect.spi.DialectResolver\\E");
		hints.resources().registerPattern("\\QMETA-INF/services/org.hibernate.engine.transaction.jta.platform.spi.JtaPlatformProvider\\E");
		hints.resources().registerPattern("\\QMETA-INF/services/org.hibernate.event.spi.EventEngineContributor\\E");
		hints.resources().registerPattern("\\QMETA-INF/services/org.hibernate.event.spi.EventManager\\E");
		hints.resources().registerPattern("\\QMETA-INF/services/org.hibernate.id.factory.spi.GenerationTypeStrategyRegistration\\E");
		hints.resources().registerPattern("\\QMETA-INF/services/org.hibernate.integrator.spi.Integrator\\E");
		hints.resources().registerPattern("\\QMETA-INF/services/org.hibernate.query.criteria.spi.CriteriaBuilderExtension\\E");
		hints.resources().registerPattern("\\QMETA-INF/services/org.hibernate.service.spi.ServiceContributor\\E");
		hints.resources().registerPattern("\\QMETA-INF/services/org.hibernate.service.spi.SessionFactoryServiceContributor\\E");
		hints.resources().registerPattern("\\Qhibernate.properties\\E");
		hints.resources().registerPattern("\\Qorg/hibernate/hibernate-configuration-3.0.dtd\\E");
		hints.resources().registerPattern("\\Qorg/hibernate/hibernate-mapping-3.0.dtd\\E");
		hints.proxies().registerJdkProxy(
			TypeReference.of("org.hibernate.Session"),
			TypeReference.of("org.springframework.orm.jpa.EntityManagerProxy")
		);
		hints.proxies().registerJdkProxy(
			TypeReference.of("org.hibernate.SessionFactory"),
			TypeReference.of("org.springframework.orm.jpa.EntityManagerFactoryInfo")
		);
		hints.reflection().registerType(TypeReference.of("[Lorg.hibernate.event.spi.AutoFlushEventListener"));
		hints.reflection().registerType(TypeReference.of("[Lorg.hibernate.event.spi.DeleteEventListener"));
		hints.reflection().registerType(TypeReference.of("[Lorg.hibernate.event.spi.DirtyCheckEventListener"));
		hints.reflection().registerType(TypeReference.of("[Lorg.hibernate.event.spi.EvictEventListener"));
		hints.reflection().registerType(TypeReference.of("[Lorg.hibernate.event.spi.FlushEntityEventListener"));
		hints.reflection().registerType(TypeReference.of("[Lorg.hibernate.event.spi.FlushEventListener"));
		hints.reflection().registerType(TypeReference.of("[Lorg.hibernate.event.spi.InitializeCollectionEventListener"));
		hints.reflection().registerType(TypeReference.of("[Lorg.hibernate.event.spi.LoadEventListener"));
		hints.reflection().registerType(TypeReference.of("[Lorg.hibernate.event.spi.LockEventListener"));
		hints.reflection().registerType(TypeReference.of("[Lorg.hibernate.event.spi.MergeEventListener"));
		hints.reflection().registerType(TypeReference.of("[Lorg.hibernate.event.spi.PersistEventListener"));
		hints.reflection().registerType(TypeReference.of("[Lorg.hibernate.event.spi.PostDeleteEventListener"));
		hints.reflection().registerType(TypeReference.of("[Lorg.hibernate.event.spi.PostInsertEventListener"));
		hints.reflection().registerType(TypeReference.of("[Lorg.hibernate.event.spi.PostLoadEventListener"));
		hints.reflection().registerType(TypeReference.of("[Lorg.hibernate.event.spi.PostUpdateEventListener"));
		hints.reflection().registerType(TypeReference.of("[Lorg.hibernate.event.spi.PreDeleteEventListener"));
		hints.reflection().registerType(TypeReference.of("[Lorg.hibernate.event.spi.PreInsertEventListener"));
		hints.reflection().registerType(TypeReference.of("[Lorg.hibernate.event.spi.PreLoadEventListener"));
		hints.reflection().registerType(TypeReference.of("[Lorg.hibernate.event.spi.PreUpdateEventListener"));
		hints.reflection().registerType(TypeReference.of("[Lorg.hibernate.event.spi.RefreshEventListener"));
		hints.reflection().registerType(TypeReference.of("[Lorg.hibernate.event.spi.ReplicateEventListener"));
		hints.reflection().registerType(TypeReference.of("[Lorg.hibernate.event.spi.ResolveNaturalIdEventListener"));
		hints.reflection().registerType(TypeReference.of("[Lorg.hibernate.event.spi.SaveOrUpdateEventListener"));
		hints.reflection().registerType(TypeReference.of("[Lorg.hibernate.query.hql.spi.DotIdentifierConsumer"));
		hints.reflection().registerType(TypeReference.of("[Lorg.hibernate.query.hql.spi.SqmCreationProcessingState"));
		hints.reflection().registerType(TypeReference.of("[Lorg.hibernate.query.sqm.spi.ParameterDeclarationContext"));
		hints.reflection().registerType(TypeReference.of("[Lorg.hibernate.query.sqm.sql.FromClauseIndex"));
		hints.reflection().registerType(TypeReference.of("[Lorg.hibernate.sql.ast.Clause"));
		hints.reflection().registerType(TypeReference.of("[Lorg.hibernate.sql.ast.spi.SqlAstProcessingState"));
		hints.reflection().registerType(TypeReference.of("[Lorg.hibernate.sql.ast.tree.Statement"));
		hints.reflection().registerType(TypeReference.of("[Lorg.hibernate.sql.ast.tree.select.QueryPart"));
		hints.reflection().registerType(TypeReference.of("[Lorg.hibernate.sql.results.jdbc.spi.JdbcValuesSourceProcessingState"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.Incubating"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.Session"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.SessionFactory"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.SharedSessionContract"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.action.internal.EntityInsertAction"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.annotations.GenericGenerator"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.annotations.JdbcTypeCode"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.annotations.OnDelete"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.annotations.Parameter"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.boot.beanvalidation.TypeSafeActivator"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.boot.cfgxml.internal.CfgXmlAccessServiceImpl"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.boot.internal.DefaultSessionFactoryBuilderService"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.boot.model.relational.ColumnOrderingStrategyStandard"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.bytecode.internal.bytebuddy.BytecodeProviderImpl"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.bytecode.spi.ReflectionOptimizer$InstantiationOptimizer"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.cache.internal.DisabledCaching"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.cache.internal.NoCachingRegionFactory"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.cfg.AvailableSettings"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.cfg.BatchSettings"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.cfg.BytecodeSettings"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.cfg.CacheSettings"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.cfg.EnvironmentSettings"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.cfg.FetchSettings"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.cfg.JdbcSettings"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.cfg.JpaComplianceSettings"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.cfg.ManagedBeanSettings"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.cfg.MappingSettings"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.cfg.MultiTenancySettings"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.cfg.PersistenceSettings"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.cfg.QuerySettings"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.cfg.SchemaToolingSettings"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.cfg.SessionEventSettings"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.cfg.StatisticsSettings"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.cfg.TransactionSettings"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.cfg.ValidationSettings"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.dialect.DialectLogging_$logger"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.dialect.DialectLogging_$logger_en"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.dialect.DialectLogging_$logger_en_ID"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.dialect.PostgreSQL95Dialect"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.engine.config.internal.ConfigurationServiceImpl"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.engine.jdbc.batch.JdbcBatchLogging_$logger"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.engine.jdbc.batch.JdbcBatchLogging_$logger_en"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.engine.jdbc.batch.JdbcBatchLogging_$logger_en_ID"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.engine.jdbc.batch.internal.BatchBuilderImpl"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.engine.jdbc.dialect.internal.DialectResolverSet"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentImpl"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.engine.jdbc.env.internal.LobCreationLogging_$logger"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.engine.jdbc.env.internal.LobCreationLogging_$logger_en"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.engine.jdbc.env.internal.LobCreationLogging_$logger_en_ID"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.engine.jdbc.internal.JdbcServicesImpl"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.engine.jdbc.internal.ResultSetReturnImpl"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.engine.jdbc.mutation.internal.MutationExecutorSingleNonBatched"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.engine.jdbc.mutation.internal.StandardMutationExecutorService"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.engine.jdbc.spi.SqlExceptionHelper"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.engine.jdbc.spi.SqlStatementLogger"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.engine.jndi.internal.JndiServiceImpl"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.engine.query.internal.NativeQueryInterpreterStandardImpl"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.engine.spi.ActionQueue"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.engine.spi.Mapping"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.engine.spi.PrimeAmongSecondarySupertypes"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.engine.spi.SessionFactoryImplementor"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.engine.spi.SessionImplementor"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.engine.transaction.internal.TransactionImpl"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.event.internal.AbstractFlushingEventListener"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.event.internal.DefaultFlushEventListener"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.event.service.internal.EventListenerGroupImpl"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.event.spi.EventType"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.exception.internal.SQLExceptionTypeDelegate"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.exception.internal.StandardSQLExceptionConverter"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.id.Assigned"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.id.IdentityGenerator"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.id.UUIDHexGenerator"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.id.factory.internal.StandardIdentifierGeneratorFactory"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.internal.CoreMessageLogger_$logger"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.internal.CoreMessageLogger_$logger_en"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.internal.CoreMessageLogger_$logger_en_ID"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.internal.EntityManagerMessageLogger_$logger"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.internal.EntityManagerMessageLogger_$logger_en"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.internal.EntityManagerMessageLogger_$logger_en_ID"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.internal.QueryParameterBindingTypeResolverImpl"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.internal.SessionFactoryImpl"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.internal.SessionImpl"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.jpa.HibernatePersistenceProvider"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.mapping.SimpleValue"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.metamodel.mapping.MappingModelCreationLogging_$logger"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.metamodel.mapping.MappingModelCreationLogging_$logger_en"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.metamodel.mapping.MappingModelCreationLogging_$logger_en_ID"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.metamodel.model.domain.JpaMetamodel"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.persister.entity.AbstractEntityPersister"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.persister.entity.SingleTableEntityPersister"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.persister.entity.mutation.InsertCoordinator"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.persister.internal.PersisterFactoryImpl"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.persister.internal.StandardPersisterClassResolver"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.property.access.internal.PropertyAccessStrategyResolverStandardImpl"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.proxy.HibernateProxy"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.proxy.ProxyConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.proxy.ProxyConfiguration$InterceptorDispatcher"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.query.QueryLogging_$logger"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.query.QueryLogging_$logger_en"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.query.QueryLogging_$logger_en_ID"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.query.QueryProducer"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.query.TypedParameterValue"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.query.hql.HqlLogging_$logger"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.query.hql.HqlLogging_$logger_en"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.query.hql.HqlLogging_$logger_en_ID"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.query.spi.AbstractSelectionQuery"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.query.spi.QueryParameterBindingTypeResolver"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.query.sqm.spi.SqmCreationContext"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.resource.beans.container.spi.BeanContainer"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.resource.beans.internal.ManagedBeanRegistryImpl"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.service.internal.SessionFactoryServiceRegistryFactoryImpl"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.sql.ast.internal.ParameterMarkerStrategyStandard"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.sql.ast.spi.SqlAstCreationContext"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.sql.ast.tree.SqlAstTreeLogger_$logger"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.sql.ast.tree.SqlAstTreeLogger_$logger_en"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.sql.ast.tree.SqlAstTreeLogger_$logger_en_ID"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.sql.exec.SqlExecLogger_$logger"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.sql.exec.SqlExecLogger_$logger_en"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.sql.exec.SqlExecLogger_$logger_en_ID"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.sql.results.LoadingLogger_$logger"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.sql.results.LoadingLogger_$logger_en"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.sql.results.LoadingLogger_$logger_en_ID"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.sql.results.ResultsLogger_$logger"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.sql.results.ResultsLogger_$logger_en"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.sql.results.ResultsLogger_$logger_en_ID"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.sql.results.jdbc.internal.JdbcValuesMappingProducerProviderStandard"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.stat.internal.StatisticsImpl"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.tool.schema.internal.HibernateSchemaManagementTool"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.type.SqlTypes"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.type.Type"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.validator.internal.constraintvalidators.bv.NotBlankValidator"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.validator.internal.constraintvalidators.bv.NotNullValidator"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.validator.internal.constraintvalidators.bv.PatternValidator"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.validator.internal.constraintvalidators.bv.number.bound.AbstractMaxValidator"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.validator.internal.constraintvalidators.bv.number.bound.AbstractMinValidator"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.validator.internal.constraintvalidators.bv.number.bound.MaxValidatorForInteger"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.validator.internal.constraintvalidators.bv.number.bound.MinValidatorForInteger"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.validator.internal.engine.AbstractConfigurationImpl"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.validator.internal.engine.ConfigurationImpl"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.validator.internal.engine.resolver.JPATraversableResolver"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.validator.internal.util.logging.Log_$logger"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.validator.internal.util.logging.Log_$logger_en"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.validator.internal.util.logging.Log_$logger_en_ID"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.validator.internal.util.logging.Messages_$bundle"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.hibernate.validator.internal.util.logging.Messages_$bundle_en"));
		hints.reflection().registerType(TypeReference.of("org.hibernate.validator.internal.util.logging.Messages_$bundle_en_ID"));
	}
}
