package net.ideahut.springboot.runtime.hints;

import org.springframework.aot.hint.MemberCategory;
import org.springframework.aot.hint.RuntimeHints;
import org.springframework.aot.hint.RuntimeHintsRegistrar;
import org.springframework.aot.hint.TypeReference;


public class SpringRuntimeHints implements RuntimeHintsRegistrar {

	@Override
	public void registerHints(RuntimeHints hints, ClassLoader loader) {
		hints.resources().registerPattern("\\QMETA-INF/mime.types\\E");
		hints.resources().registerPattern("\\QMETA-INF/mimetypes.default\\E");
		hints.resources().registerPattern("\\QMETA-INF/spring.factories\\E");
		hints.resources().registerPattern("\\QMETA-INF/spring.integration.properties\\E");
		hints.resources().registerPattern("\\QMETA-INF/validation.xml\\E");
		hints.resources().registerPattern("\\Qapplication-default.properties\\E");
		hints.resources().registerPattern("\\Qapplication-default.xml\\E");
		hints.resources().registerPattern("\\Qapplication-default.yaml\\E");
		hints.resources().registerPattern("\\Qapplication-default.yml\\E");
		hints.resources().registerPattern("\\Qapplication.properties\\E");
		hints.resources().registerPattern("\\Qapplication.xml\\E");
		hints.resources().registerPattern("\\Qapplication.yaml\\E");
		hints.resources().registerPattern("\\Qapplication.yml\\E");
		hints.resources().registerPattern("\\Qconfig/application-default.properties\\E");
		hints.resources().registerPattern("\\Qconfig/application-default.xml\\E");
		hints.resources().registerPattern("\\Qconfig/application-default.yaml\\E");
		hints.resources().registerPattern("\\Qconfig/application-default.yml\\E");
		hints.resources().registerPattern("\\Qconfig/application.properties\\E");
		hints.resources().registerPattern("\\Qconfig/application.xml\\E");
		hints.resources().registerPattern("\\Qconfig/application.yaml\\E");
		hints.resources().registerPattern("\\Qconfig/application.yml\\E");
		hints.resources().registerPattern("\\Qorg/springframework/boot/web/server/mime-mappings.properties\\E");
		hints.resources().registerPattern("\\Qspring.properties\\E");
		hints.serialization().registerType(TypeReference.of("byte[]"));
		hints.serialization().registerType(TypeReference.of("java.lang.String"));
		hints.proxies().registerJdkProxy(
			TypeReference.of("org.springframework.boot.context.properties.ConfigurationProperties")
		);
		hints.proxies().registerJdkProxy(
			TypeReference.of("org.springframework.data.jpa.repository.support.CrudMethodMetadata"),
			TypeReference.of("org.springframework.aop.SpringProxy"),
			TypeReference.of("org.springframework.aop.framework.Advised"),
			TypeReference.of("org.springframework.core.DecoratingProxy")
		);
		hints.reflection().registerType(TypeReference.of("[Lorg.springframework.core.io.Resource"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("[Lorg.springframework.data.domain.Sort$Order"));
		hints.reflection().registerType(TypeReference.of("[Lorg.springframework.data.repository.core.support.RepositoryFragment"));
		hints.reflection().registerType(TypeReference.of("[Lorg.springframework.util.ConcurrentReferenceHashMap$Segment"));
		hints.reflection().registerType(TypeReference.of("jakarta.inject.Provider"));
		hints.reflection().registerType(TypeReference.of("jakarta.inject.Qualifier"));
		hints.reflection().registerType(TypeReference.of("javax.annotation.Nonnull"));
		hints.reflection().registerType(TypeReference.of("javax.money.MonetaryAmount"));
		hints.reflection().registerType(TypeReference.of("javax.naming.InitialContext"));
		hints.reflection().registerType(TypeReference.of("javax.naming.Referenceable"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.aop.SpringProxy"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.aop.TargetClassAware"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.aop.framework.Advised"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.aop.framework.AopInfrastructureBean"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.aop.framework.JdkDynamicAopProxy"));
		hints.reflection().registerType(TypeReference.of("org.springframework.aop.framework.ProxyConfig"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.aop.framework.ProxyProcessorSupport"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.aop.framework.ReflectiveMethodInvocation"));
		hints.reflection().registerType(TypeReference.of("org.springframework.aop.interceptor.ExposeInvocationInterceptor"));
		hints.reflection().registerType(TypeReference.of("org.springframework.aop.scope.ScopedObject"));
		hints.reflection().registerType(TypeReference.of("org.springframework.beans.factory.Aware"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.beans.factory.BeanClassLoaderAware"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.beans.factory.BeanFactoryAware"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.beans.factory.BeanNameAware"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.beans.factory.DisposableBean"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.beans.factory.FactoryBean"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.beans.factory.InitializingBean"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.beans.factory.annotation.Autowired"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.beans.factory.annotation.Qualifier"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.beans.factory.config.AbstractFactoryBean"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.beans.factory.config.BeanPostProcessor"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.beans.factory.support.NullBean"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.Banner$ModeEditor"));
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.ClearCachesApplicationListener"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.SpringApplication"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.SpringBootConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.ansi.AnsiOutput$Enabled"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.AutoConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.AutoConfigurationPackage"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.AutoConfigurationPackages$BasePackages"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.AutoConfigureAfter"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.AutoConfigureBefore"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.AutoConfigureOrder"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.BackgroundPreinitializer"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.EnableAutoConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.SpringBootApplication"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.aop.AopAutoConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$AspectJAutoProxyingConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$AspectJAutoProxyingConfiguration$CglibAutoProxyConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.condition.ConditionalOnBean"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.condition.ConditionalOnClass"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.condition.ConditionalOnNotWarDeployment"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.condition.ConditionalOnProperty"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.condition.ConditionalOnResource"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.condition.ConditionalOnThreading"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.context.LifecycleProperties"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.data.redis.JedisConnectionConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.data.redis.PropertiesRedisConnectionDetails"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.data.redis.RedisConnectionDetails"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.data.redis.RedisProperties"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.freemarker.FreeMarkerTemplateAvailabilityProvider"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAvailabilityProvider"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration$StandardGsonBuilderCustomizer"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.gson.GsonBuilderCustomizer"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.gson.GsonProperties"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.http.GsonHttpMessageConvertersConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.http.HttpMessageConverters"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2XmlHttpMessageConverterConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.info.ProjectInfoProperties"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.integration.IntegrationPropertiesEnvironmentPostProcessor"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.jackson.Jackson2ObjectMapperBuilderCustomizer"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$StandardJackson2ObjectMapperBuilderCustomizer"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonMixinConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.jackson.JacksonProperties"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration$JdbcTransactionManagerConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.jdbc.JdbcClientAutoConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.jdbc.JdbcProperties"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.jdbc.JdbcTemplateConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.jdbc.NamedParameterJdbcTemplateConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvidersConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvidersConfiguration$HikariPoolDataSourceMetadataProviderConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.mustache.MustacheTemplateAvailabilityProvider"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.orm.jpa.JpaProperties"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.quartz.QuartzProperties"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.service.connection.ConnectionDetails"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.sql.init.DataSourceInitializationConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.sql.init.SqlDataSourceScriptDatabaseInitializer"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.sql.init.SqlInitializationAutoConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.sql.init.SqlInitializationProperties"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.ssl.FileWatcher"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.ssl.SslAutoConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.ssl.SslBundleRegistrar"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.ssl.SslProperties"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.ssl.SslPropertiesBundleRegistrar"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.task.TaskExecutionProperties"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$SimpleAsyncTaskExecutorBuilderConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$TaskExecutorBuilderConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$TaskExecutorConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$ThreadPoolTaskExecutorBuilderConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.task.TaskSchedulingConfigurations$SimpleAsyncTaskSchedulerBuilderConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.task.TaskSchedulingConfigurations$TaskSchedulerBuilderConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.task.TaskSchedulingConfigurations$ThreadPoolTaskSchedulerBuilderConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.task.TaskSchedulingProperties"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.thymeleaf.ThymeleafTemplateAvailabilityProvider"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.transaction.ExecutionListenersTransactionManagerCustomizer"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$TransactionTemplateConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizationAutoConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizer"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.transaction.TransactionProperties"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.web.ServerProperties"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.web.WebProperties"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.web.client.AutoConfiguredRestClientSsl"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.web.client.HttpMessageConvertersRestClientCustomizer"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.web.client.RestClientBuilderConfigurer"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.web.client.RestClientSsl"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.web.client.RestTemplateBuilderConfigurer"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration$TomcatWebServerFactoryCustomizerConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.web.embedded.TomcatWebServerFactoryCustomizer"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.web.servlet.DispatcherServletPath"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.web.servlet.DispatcherServletRegistrationBean"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration$LocaleCharsetMappingsCustomizer"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.web.servlet.JspTemplateAvailabilityProvider"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.web.servlet.MultipartProperties"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration$EmbeddedTomcat"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryCustomizer"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactoryCustomizer"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.web.servlet.error.DefaultErrorViewResolver"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$DefaultErrorViewResolverConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$ErrorPageCustomizer"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$StaticView"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.web.servlet.error.ErrorViewResolver"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.websocket.servlet.TomcatWebSocketServletWebServerCustomizer"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration$TomcatWebSocketConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.availability.ApplicationAvailability"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.availability.ApplicationAvailabilityBean"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.builder.ParentContextCloserApplicationListener"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.cloud.CloudFoundryVcapEnvironmentPostProcessor"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializer"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.context.ContextIdApplicationContextInitializer"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.context.FileEncodingApplicationListener"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.context.config.AnsiOutputApplicationListener"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessor"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.context.config.ConfigDataNotFoundAction"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.context.config.ConfigDataProperties"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.context.config.ConfigTreeConfigDataLoader"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.context.config.ConfigTreeConfigDataLocationResolver"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.context.config.DelegatingApplicationContextInitializer"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.context.config.DelegatingApplicationListener"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.context.config.StandardConfigDataLoader"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.context.config.StandardConfigDataLocationResolver"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.context.event.EventPublishingRunListener"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.context.logging.LoggingApplicationListener"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.context.properties.BoundConfigurationProperties"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.context.properties.ConfigurationProperties"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.context.properties.DeprecatedConfigurationProperty"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.context.properties.EnableConfigurationProperties"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.context.properties.bind.Name"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.env.EnvironmentPostProcessorApplicationListener"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.env.PropertiesPropertySourceLoader"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.env.RandomValuePropertySourceEnvironmentPostProcessor"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.env.SpringApplicationJsonEnvironmentPostProcessor"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.env.YamlPropertySourceLoader"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.jackson.JsonComponentModule"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.jackson.JsonMixinModule"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.jackson.JsonMixinModuleEntries"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.jdbc.metadata.DataSourcePoolMetadataProvider"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.loader.launch.LaunchedClassLoader"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.loader.net.protocol.jar.JarUrlClassLoader"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.logging.LogLevelEditor"));
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.logging.java.JavaLoggingSystem$Factory"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.logging.java.JavaLoggingSystem.Factory"));
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.logging.log4j2.Log4J2LoggingSystem$Factory"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.logging.log4j2.Log4J2LoggingSystem.Factory"));
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.logging.logback.LogbackLoggingSystem$Factory"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.logging.logback.LogbackLoggingSystem.Factory"));
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.reactor.ReactorEnvironmentPostProcessor"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.rsocket.context.RSocketPortInfoApplicationContextInitializer"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.ssl.DefaultSslBundleRegistry"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.ssl.SslBundleRegistry"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.ssl.SslBundles"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.task.SimpleAsyncTaskExecutorBuilder"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.task.TaskExecutorBuilder"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.task.TaskSchedulerBuilder"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.task.ThreadPoolTaskExecutorBuilder"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.task.ThreadPoolTaskSchedulerBuilder"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.validation.beanvalidation.MethodValidationExcludeFilter"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.web.client.RestClientCustomizer"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.web.client.RestTemplateBuilder"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.web.context.ServerPortInfoApplicationContextInitializer"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.web.embedded.tomcat.ConfigurableTomcatWebServerFactory"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.web.reactive.context.GenericReactiveWebApplicationContext"));
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContextFactory"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.web.server.AbstractConfigurableWebServerFactory"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.web.server.ConfigurableWebServerFactory"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.web.server.ErrorPageRegistrar"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.web.server.ErrorPageRegistry"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.web.server.WebServerFactory"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.web.server.WebServerFactoryCustomizer"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.web.servlet.AbstractFilterRegistrationBean"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.web.servlet.DynamicRegistrationBean"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.web.servlet.FilterRegistrationBean"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.web.servlet.RegistrationBean"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.web.servlet.ServletContextInitializer"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.web.servlet.ServletRegistrationBean"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.web.servlet.WebListenerRegistry"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.web.servlet.context.ServletWebServerApplicationContextFactory"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.web.servlet.error.DefaultErrorAttributes"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.web.servlet.error.ErrorAttributes"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.web.servlet.error.ErrorController"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.web.servlet.filter.OrderedCharacterEncodingFilter"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.web.servlet.filter.OrderedFilter"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.web.servlet.server.Encoding"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.web.servlet.server.ServletWebServerFactory"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.boot.web.servlet.support.SpringBootServletInitializer"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.context.ApplicationContextAware"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.context.ApplicationEventPublisherAware"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.context.ApplicationListener"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.context.EmbeddedValueResolverAware"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.context.EnvironmentAware"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.context.Lifecycle"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.context.LifecycleProcessor"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.context.Phased"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.context.ResourceLoaderAware"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.context.SmartLifecycle"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.context.annotation.Bean"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.context.annotation.ComponentScan"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.context.annotation.ComponentScan$Filter"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.context.annotation.Conditional"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.context.annotation.Configuration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.context.annotation.ConfigurationClassEnhancer$EnhancedConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.context.annotation.EnableAspectJAutoProxy"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.context.annotation.Import"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.context.annotation.ImportAware"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.context.annotation.ImportRuntimeHints"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.context.annotation.Lazy"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.context.annotation.Primary"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.context.annotation.Role"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.context.annotation.Scope"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.context.support.ApplicationObjectSupport"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.context.support.DefaultLifecycleProcessor"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.core.DecoratingProxy"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.core.Ordered"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.core.annotation.AliasFor"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.core.annotation.Order"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.core.convert.ConversionService"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.core.convert.converter.ConverterRegistry"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.core.convert.support.ConfigurableConversionService"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.core.convert.support.GenericConversionService"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.core.env.EnvironmentCapable"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.core.io.Resource"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.core.io.support.PropertiesLoaderSupport"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.core.task.AsyncListenableTaskExecutor"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.core.task.AsyncTaskExecutor"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.core.task.TaskExecutor"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.annotation.QueryAnnotation"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.convert.CustomConversions"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.convert.EntityConverter"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.convert.EntityReader"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.convert.EntityWriter"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.convert.ReadingConverter"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.convert.WritingConverter"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.domain.AbstractPageRequest"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.domain.Chunk"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.domain.Page"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.domain.PageImpl"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.domain.PageRequest"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.domain.Pageable"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.domain.Slice"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.domain.Sort"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.domain.Unpaged"));
		hints.reflection().registerType(TypeReference.of("org.springframework.data.geo.GeoModule"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.jpa.mapping.JpaMetamodelMappingContext"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.jpa.repository.JpaContext"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.jpa.repository.JpaRepository"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.jpa.repository.JpaSpecificationExecutor"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.jpa.repository.Query"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.jpa.repository.config.EnableJpaRepositories"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.jpa.repository.config.JpaMetamodelMappingContextFactoryBean"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.jpa.repository.config.JpaRepositoryConfigExtension"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.jpa.repository.query.AbstractJpaQuery"));
		hints.reflection().registerType(TypeReference.of("org.springframework.data.jpa.repository.query.JpaQueryExecution"));
		hints.reflection().registerType(TypeReference.of("org.springframework.data.jpa.repository.query.JpaQueryExecution$SingleEntityExecution"));
		hints.reflection().registerType(TypeReference.of("org.springframework.data.jpa.repository.support.CrudMethodMetadata"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor"));
		hints.reflection().registerType(TypeReference.of("org.springframework.data.jpa.repository.support.DefaultJpaContext"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.jpa.repository.support.JpaEvaluationContextExtension"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.jpa.repository.support.JpaRepositoryImplementation"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.jpa.repository.support.SimpleJpaRepository"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.jpa.util.HibernateProxyDetector"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.jpa.util.JpaMetamodelCacheCleanup"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.keyvalue.core.AbstractKeyValueAdapter"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.keyvalue.core.KeyValueAdapter"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.keyvalue.core.KeyValueOperations"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.keyvalue.core.KeyValueTemplate"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.keyvalue.core.mapping.context.KeyValueMappingContext"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.mapping.PersistentPropertyAccessor"));
		hints.reflection().registerType(TypeReference.of("org.springframework.data.mapping.context.AbstractMappingContext"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.mapping.context.MappingContext"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.querydsl.QuerydslPredicateExecutor"));
		hints.reflection().registerType(TypeReference.of("org.springframework.data.querydsl.ReactiveQuerydslPredicateExecutor"));
		hints.reflection().registerType(TypeReference.of("org.springframework.data.repository.CrudRepository"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.repository.ListCrudRepository"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.repository.ListPagingAndSortingRepository"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.repository.NoRepositoryBean"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.repository.PagingAndSortingRepository"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.repository.Repository"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.repository.config.PropertiesBasedNamedQueriesFactoryBean"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.repository.config.RepositoryConfigurationExtension"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.repository.config.RepositoryConfigurationExtensionSupport"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.repository.core.NamedQueries"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.repository.core.support.PropertiesBasedNamedQueries"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor"));
		hints.reflection().registerType(TypeReference.of("org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.repository.core.support.RepositoryFactoryInformation"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.repository.core.support.RepositoryFragmentsFactoryBean"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.repository.core.support.RepositoryMethodInvoker"));
		hints.reflection().registerType(TypeReference.of("org.springframework.data.repository.core.support.TransactionalRepositoryFactoryBeanSupport"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.repository.query.QueryByExampleExecutor"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.repository.query.QueryLookupStrategy$Key"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.repository.query.ReactiveQueryByExampleExecutor"));
		hints.reflection().registerType(TypeReference.of("org.springframework.data.spel.spi.EvaluationContextExtension"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.spel.spi.ExtensionIdAware"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.util.CustomCollections$EclipseCollections"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.util.CustomCollections$VavrCollections"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.util.CustomCollections.EclipseCollections"));
		hints.reflection().registerType(TypeReference.of("org.springframework.data.util.CustomCollections.VavrCollections"));
		hints.reflection().registerType(TypeReference.of("org.springframework.data.util.KotlinBeanInfoFactory"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.util.Streamable"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.web.OffsetScrollPositionArgumentResolver"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.web.OffsetScrollPositionHandlerMethodArgumentResolver"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.web.OffsetScrollPositionHandlerMethodArgumentResolverSupport"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.web.PageableArgumentResolver"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.web.PageableHandlerMethodArgumentResolver"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.web.PageableHandlerMethodArgumentResolverSupport"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.web.SortArgumentResolver"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.web.SortHandlerMethodArgumentResolver"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.web.SortHandlerMethodArgumentResolverSupport"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.web.config.EnableSpringDataWebSupport"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.web.config.PageableHandlerMethodArgumentResolverCustomizer"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.web.config.ProjectingArgumentResolverRegistrar"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.web.config.ProjectingArgumentResolverRegistrar$ProjectingArgumentResolverBeanPostProcessor"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.web.config.SortHandlerMethodArgumentResolverCustomizer"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.web.config.SpringDataJacksonConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.web.config.SpringDataJacksonConfiguration$PageModule"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.web.config.SpringDataJacksonModules"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.data.web.config.SpringDataWebConfiguration"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.jndi.JndiObjectFactoryBean"));
		hints.reflection().registerType(TypeReference.of("org.springframework.lang.NonNullApi"));
		hints.reflection().registerType(TypeReference.of("org.springframework.lang.Nullable"));
		hints.reflection().registerType(TypeReference.of("org.springframework.scheduling.SchedulingTaskExecutor"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.scheduling.concurrent.CustomizableThreadFactory"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.scheduling.concurrent.ExecutorConfigurationSupport"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.stereotype.Component"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.stereotype.Controller"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.stereotype.Indexed"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.stereotype.Repository"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.stereotype.Service"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.util.AntPathMatcher"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.util.Assert"));
		hints.reflection().registerType(TypeReference.of("org.springframework.util.CustomizableThreadCreator"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.util.PathMatcher"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.util.unit.DataSizeEditor"));
		hints.reflection().registerType(TypeReference.of("org.springframework.validation.SmartValidator"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.validation.Validator"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.validation.beanvalidation.OptionalValidatorFactoryBean"), MemberCategory.values());
		hints.reflection().registerType(TypeReference.of("org.springframework.validation.beanvalidation.SpringValidatorAdapter"), MemberCategory.values());
	}
}
